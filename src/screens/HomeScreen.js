import React, {useContext, useEffect, useState} from 'react';
import {Button, StyleSheet, Text, View} from 'react-native';
import Spinner from 'react-native-loading-spinner-overlay';
import {AuthContext} from '../context/AuthContext';

import {Picker} from '@react-native-picker/picker';

import PushNotification from 'react-native-push-notification';

import {LineChart} from 'react-native-chart-kit';
import {Dimensions} from 'react-native';
const screenWidth = Dimensions.get('window').width;

const HomeScreen = ({navigation}) => {
  const {
    userInfo,
    setIsLoading,
    logout,
    timeInfo,
    pcInfo,
    getData_sec,
    getData_min,
    getData_hr,
    pickerVal,
    displayTime,
    displayGraph,
    detectAnomaly,
    rpiInfo,
    currentStatus,
    setCurrentStatus,
  } = useContext(AuthContext);

  useEffect(() => {
    const intervalId = setInterval(() => {
      //assign interval to a variable to clear it.
      //console.log(pickerVal[0]);
      displayGraph(pickerVal[0]);
      detectAnomaly();
    }, 1000); //refresh in 1 second

    return () => clearInterval(intervalId); //This is important
  }, []);

  anomalyNotification = () => {
    PushNotification.localNotification({
      /* Android Only Properties */
      channelId: 'channel-id', // (required) channelId, if the channel doesn't exist, notification will not trigger.

      /* iOS and Android properties */
      //id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      title: 'My Notification Title', // (optional)
      message: 'My Notification Message', // (required)
    });
  };

  return (
    <View style={styles.container}>
      <Spinner visible={setIsLoading} />
      {/* <Text style={styles.welcome}>{rpiInfo.ip_address}</Text> */}
      <Text style={styles.welcome}>Aggregated Data (by {pickerVal[0]})</Text>

      <Picker
        style={{height: 50, width: 150, color: '#000'}}
        dropdownIconColor="black"
        onValueChange={displayTime}
        selectedValue={pickerVal[0]}>
        <Picker.Item label="Second" value="Second" />
        <Picker.Item label="Minute" value="Minute" />
        <Picker.Item label="Hour" value="Hour" />
      </Picker>

      <LineChart
        data={{
          labels: timeInfo,
          datasets: [
            {
              data: pcInfo,
              color: (opacity = 1) => `rgba(255, 0, 0, ${opacity})`, // optional
              strokeWidth: 2, // optional
            },
          ],
          //legend: ["Rainy Days"] // optional
        }}
        width={screenWidth}
        height={220}
        chartConfig={chartConfig}
        getDotColor={(dataPoint, dataPointIndex) => {
          //console.log(currentStatus);
          if (currentStatus[dataPointIndex] == 'Anomaly') return '#ff0000';
          // red
          else return '#00ff00'; // green
        }}
      />

      {/* <Button title="Test" color="blue" onPress={anomalyNotification} /> */}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    //alignItems: 'center',
    justifyContent: 'flex-start',
  },
  welcome: {
    fontSize: 18,
    marginBottom: 8,
    color: '#000',
  },
});

const chartConfig = {
  backgroundGradientFrom: '#1E2923',
  backgroundGradientFromOpacity: 0,
  backgroundGradientTo: '#08130D',
  backgroundGradientToOpacity: 0.5,
  color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,
  labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
  strokeWidth: 2, // optional, default 3
  barPercentage: 0.5,
  useShadowColorFromDataset: false, // optional
  propsForLabels: {
    fontFamily: 'MontserratBold',
    fontSize: 9,
  },
};

export default HomeScreen;
